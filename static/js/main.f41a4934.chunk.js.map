{"version":3,"sources":["component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlfor","TextForm","useState","text","setText","style","color","heading","for","value","onChange","event","console","log","target","backgroundColor","rows","newtext","toUpperCase","showAlert","d","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","newText","split","join","length","Alert","alert","Type","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","abouttext","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f41a4934.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n      \r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> \r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">About</a>\r\n           </li>\r\n            </ul>\r\n            <div className={` form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlfor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={title:PropTypes.string.isRequired,\r\n                        abouttext:PropTypes.string\r\n                    }\r\n// Navbar.defaultprops={\r\n//     title:'set title here',\r\n//     abouttext:'dfvsd'\r\n// };","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText]=useState('');\r\n    // setText(\"ffuh\"); correct way to change the state\r\n   \r\n\r\n    const handleOnchange=(event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleupclick=()=>{\r\n        // console.log(\"uppercase was clicked\");\r\n        // setText(\"you have clicked uppercase \");\r\n        let newtext=text.toUpperCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Coverted to uppercase\",\"Succes\")\r\n\r\n    }\r\n    const handleloclick=()=>{\r\n        let d=text.toLowerCase();\r\n        setText(d);\r\n        props.showAlert(\"Coverted to lowercase\",\"Succes\")\r\n    }\r\n    const handleClear=()=>{\r\n        let newtext=\"\";\r\n        setText(newtext);\r\n        props.showAlert(\"text cleared\",\"Succes\")\r\n\r\n    }\r\n    const handleCopy=()=>{\r\n        console.log(\"i am copy\");\r\n        var text=document.getElementById(\"myBox\");\r\n        text.select();\r\n        text.setSelectionRange(0,99999);\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"text copied\",\"warning\")\r\n\r\n    }\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"all extra spaces cleared\",\"success\")\r\n    }\r\n    return (\r\n        \r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                <label for=\"myBox\"  className=\"form-label\"></label>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnchange} style={{backgroundColor:props.mode==='dark'?'gray':'white',color:props.mode==='dark'?'white':'#042743'}} id=\"myBox\" rows=\"12\"></textarea>\r\n                </div>\r\n                <button className=\"btn btn-primary my-2\" onClick={handleupclick} >Convert to uppercase</button> \r\n                <button className=\"btn btn-success my-2 mx-2\" onClick={handleloclick} >Convert to lowercase</button> \r\n                <button className=\"btn btn-danger my-2 mx-2\" onClick={handleClear} >clear text</button> \r\n                <button className=\"btn btn-secondary my-2 mx-2\" onClick={handleCopy} >copy text</button> \r\n                <button className=\"btn btn-warning my-2 mx-2\" onClick={handleExtraSpaces} >Remove extra spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\"style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} chracters</p>\r\n            <p>{0.008*text.split(\" \").length} minutes read</p>\r\n            <h2>preveiw</h2>\r\n            <p>{text.length>0?text:\"enter something in textbox to preview it here\"}</p>\r\n        </div>\r\n      </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n      props.alert &&  <div className={`alert alert-${props.alert.Type} alert-dismissible fade show`} role=\"alert\">\r\n        <p><strong>{capitalize(props.alert.Type)}</strong>:{props.alert.msg}  </p> \r\n        \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n\r\n"," \nimport './App.css';\nimport Navbar from './component/Navbar.js';\nimport TextForm from './component/TextForm.js';\n// import About from './component/About';\nimport React,{useState} from 'react'\nimport Alert from './component/Alert';\n// import {BrowserRouter as Router,Routes,Route,Link} from \"react-router-dom\"\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const toggleMode=()=>{\n    if (mode==='light') {\n      setMode('dark')\n      document.body.style.backgroundColor='lightblue'\n      showAlert(\"Darkmode has been enabled\",\"success\")\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert(\"Lightmode has been enabled\",\"success\")\n\n    }\n  }\n  const [alert, setAlert] = useState(null)\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg:message,\n      Type:type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  return (\n<>\n    \n    <Navbar title=\"Textutils\" abouttext=\"about us\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert} /> \n    \n      <TextForm mode={mode} heading=\"enter text here\" showAlert={showAlert}/>\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}